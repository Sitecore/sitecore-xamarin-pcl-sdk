// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Sitecore.MobileSDK.API.Session;
using Sitecore.MobileSDK.API;
using Sitecore.MobileSDK.API.Items;

namespace WhiteLabeliOS
{
  public partial class SearchItemViewController : BaseTaskTableViewController
	{
    public SearchItemViewController(IntPtr handle) : base (handle)
    {
      Title = NSBundle.MainBundle.LocalizedString("getItemBySearch", null);
    }

    public override void ViewDidLoad()
    {
      base.ViewDidLoad();
      this.TableView = this.ItemsTableView;

      queryTextField.Text = "home";


      string getChildrenButtonTitle = NSBundle.MainBundle.LocalizedString("Search", null);
      getItemButton.SetTitle(getChildrenButtonTitle, UIControlState.Normal);

      nameLabel.Text = NSBundle.MainBundle.LocalizedString("Type search term", null);
    }

    partial void OnGetItemButtonTouched(Foundation.NSObject sender)
    {
      if (String.IsNullOrEmpty(queryTextField.Text))
      {
        AlertHelper.ShowLocalizedAlertWithOkOption("Error", "Please type search term");
      }
      else
      {
        this.HideKeyboard(this.queryTextField);
        this.SendRequest();
      }
    }

    private async void SendRequest()
    {
      try
      {
        using (ISitecoreSSCSession session = this.instanceSettings.GetSession())
        {          
          this.ShowLoader();

          var request = ItemSSCRequestBuilder.SitecoreSearchRequest(queryTextField.Text)
                                             .AddDescendingFieldsToSort("title")    
                                             .Build();

          ScItemsResponse response = await session.RunSitecoreSearchAsync(request);

          this.HideLoader();

          if (response.ResultCount > 0)
          {
            this.ShowItemsList(response);
          }
          else 
          {
            AlertHelper.ShowLocalizedAlertWithOkOption("Message", "No items found");
          }
        }
      }
      catch(Exception e) 
      {
        this.HideLoader();
        AlertHelper.ShowLocalizedAlertWithOkOption("Error", e.Message);
      }
    }
	}
}
